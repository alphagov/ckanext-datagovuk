import unittest
from ckanext.datagovuk.lib.drupal_password import (
    user_check_password,
    user_hash_password,
    password_base64_encode,
    )


class TestDrupalPassword(unittest.TestCase):
    def test_check_password_against_php_hash(self):
        password = 'pass'
        # hash generated by PHP routine
        hash_ = '$S$DRiiw/cbErl17QbvDynMsdbUGxsy5HPTXg4L1j0dlG2iOJB35XP6'
        self.assertTrue(user_check_password(password, hash_))
        self.assertFalse(user_check_password('wrong_password', hash_))

    def test_check_password_against_our_own_hash(self):
        password = 'pass'
        hash_ = user_hash_password(password)

        self.assertEqual(hash_[:4], '$S$D')  # standard for drupal 7
        self.assertEqual(len(hash_), 55)
        self.assertTrue(user_check_password(password, hash_))
        self.assertFalse(user_check_password('wrong_password', hash_))

    def test_password_base64_encode(self):
        # example values
        input_ = 'w<$\xdc\xb9?\xfe\x8c\xe1\xe9\tJ=\xee\x1f\xd3\xf6\x8d\xacq\r\xaf\x90\xc6\x12\xe1jUS\x1c\xe3\x86lM\xf6\xd8\x01]\xc4\x84W\xef\xb6\xb8\x9f\xeb\x06[\x85.\xafXl\xc6l\xfd\xcb\x92\x1f\xf3\x12\x95+\xcf'
        count = 64
        expected_result = 'rl17QbvDynMsdbUGxsy5HPTXg4L1j0dlG2iOJB35XP6PBNDq/o3l2SpvqWvbfPkK3umfMlalgpzmGylwGIt8D1'
        result = password_base64_encode(input_, count)

        self.assertEqual(len(result), 86)
        self.assertEqual(result, expected_result)
